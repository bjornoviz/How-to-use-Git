// Creates a local repository with no server or deamon running
// in the background.
git init project1

// .git is the control structure. It is a hidden folder, but
// looking in to it can give a good idea of how everything
// works. In Subversion there is only one constrol structure
// but in git there is one for every project.
tree .git | more

// Typing 'git status' tells you the branch and commit status.
git status

// Clear content of file
cat /dev/null > learngit.txt

// Copy content from one file to another
cat /var/www/git/test/test.txt >> learngit.txt

// Add file to version control
// You might run 'git status' and see 'Untracked files:'
// displaying files that are not yet under version control.
// Files git have not seen before. By typing 'git add
// learngit.txt' you send a suggestion to add this file to
// version control. It does not make it a permenant record of
// that version yet.
git add learngit.txt

// Commit your added files with a commit message.
git commit -m "Commit message"

// Git Gui is a GUI for Git. Simply type 'sudo apt-get install git-gui' to install it and 'git gui' to run it.
git gui

// Push an existing repository from the command line
git remote add origin https://github.com/bjornoviz/How-to-use-Git.git
git push -u origin master

/**
 * Participate on other projects
 **/

// First fork it on GitHub, then type in the following to get a
// local copy
git clone https://github.com/bjornoviz/How-to-use-Git.git

// Creating a new branch
git branch maylearning
// Toggeling to the new branch
git checkout maylearning

// How to show branch in terminal:
// In .bashrc add this:
parse_git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
PS1="${debian_chroot:+($debian_chroot)}\u@\h:\w\ $(parse_git_branch) $"


